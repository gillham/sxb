#!/usr/bin/env python3
#
# Originally from:
# https://github.com/kalj/sxb
# with 65c816 updates posted by derekmulcahy in an issue.
#
# I modified this to work with my  W65C816SXB board. It is a Rev.C
# and the WDCMON identifies as "200" which I take to be v2.0 as the commands
# match the WDCMON v2.0 PDF.  This version doesn't support several of
# the commands and has changed some of them to need low/high/bank bytes.
#
# This works only works on this verison of board, use kalj's original
# version if you have a different board revision or WDCMON version.

import argparse
import serial
import pathlib
import sys

CMD_SYNC = 0x00  # resync data port sends $00 in response
CMD_ECHO = 0x01  # deprecated - calls sync not echo
CMD_WRITE_MEM = 0x02  # write data to board memory
CMD_READ_MEM = 0x03  # read data from board memory
CMD_INTERNALREG = 0x04  # deprecated, calls sync was internal registers
CMD_EXEC_DEBUG = 0x05  # deprecated, calls sync not debug exec
CMD_EXEC_DIRECT = 0x06  # execute code directly
CMD_WRITE_FLASH = 0x07  # not supported yet. write data to flash chip
CMD_READ_FLASH = 0x08  # not supported yet. read data from flash chip
CMD_CLEAR_FLASH = 0x09  # not supported yet. clear flash chip
CMD_CHECK_FLASH = 0x0A  # not supported yet. check if flash chip is clear
CMD_EXEC_FLASH = 0x0B  # not supported yet. execute code from flash chip
CMD_BOARD_INFO = 0x0C  # get board and monitor version
CMD_UPDATE_MONITOR = 0x0D  # not supported yet. update the monitor itself


def lo(x):
    return x & 0xFF


def hi(x):
    return (x >> 8) & 0xFF


def bank(x):
    return (x >> 16) & 0xFF


#
# This doesn't seem to work as expected.
# It is unclear from the limited docs when this can be used.
#
def sync_port(ser):
    ser.write(bytes([0x55, 0xAA]))
    resp = ser.read(1)

    if len(resp) != 1 or resp[0] != 0xCC:
        raise RuntimeError("No response from SXB -- Try pressing RESET")

    ser.write(bytes(CMD_SYNC))
    resp = ser.read(1)
    if len(resp) != 1 or resp[0] != 0x00:
        raise RuntimeError("Re-sync with SXB failed -- Try pressing RESET")


def initiate_command(ser, cmd):
    ser.write(bytes([0x55, 0xAA]))
    resp = ser.read(1)

    if len(resp) != 1 or resp[0] != 0xCC:
        raise RuntimeError("No response from SXB -- Try pressing RESET")

    ser.write(bytes([cmd]))


def write_memory(ser, addr, data):
    initiate_command(ser, CMD_WRITE_MEM)

    data_len = len(data)
    ser.write(
        bytes(
            [lo(addr), hi(addr), bank(addr), lo(data_len), hi(data_len), bank(data_len)]
        )
    )

    for b in data:
        ser.write(bytes([b]))


def read_memory(ser, addr, data_len):
    initiate_command(ser, CMD_READ_MEM)

    ser.write(
        bytes(
            [lo(addr), hi(addr), bank(addr), lo(data_len), hi(data_len), bank(data_len)]
        )
    )

    data = ser.read(data_len)
    return data


def format_table(data, offset=0):
    BYTES_PER_LINE = 16

    output = []
    header = " addr |" + "".join([f" {i:2d}" for i in range(BYTES_PER_LINE)])
    output.append(header)
    output.append(" " + "-" * (len(header) - 1))

    lineoffset = offset % BYTES_PER_LINE
    base = offset - lineoffset
    n_bytes_left = len(data)
    dataptr = 0

    while n_bytes_left > 0:
        chunk_size = min(n_bytes_left, BYTES_PER_LINE - lineoffset)
        chunk = data[dataptr : (dataptr + chunk_size)]
        elems = lineoffset * ["   "] + [f" {b:02x}" for b in chunk]
        output.append(f" {base:04x} |" + "".join(elems))

        base += BYTES_PER_LINE
        dataptr += chunk_size
        n_bytes_left -= chunk_size
        lineoffset = 0  # only first time is relevant

    return output


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--device", help="Serial device", default="/dev/REPLACEME"
    )

    subparsers = parser.add_subparsers(dest="command", required=True, metavar="command")

    info_p = subparsers.add_parser("info", help="Get board info")

    read_p = subparsers.add_parser("read", help="Read bytes")
    read_p.add_argument("-t", "--table", action="store_true")
    read_p.add_argument("addr")
    read_p.add_argument("size")

    write_p = subparsers.add_parser("write", help="Write bytes")
    write_p.add_argument("addr")
    write_p.add_argument("file")

    exec_p = subparsers.add_parser("exec", help="Start execution")
    # exec_p.add_argument("-t", "--terminal", help="Start terminal after finish", action='store_true')
    exec_p.add_argument("addr")

    args = parser.parse_args()

    dev = args.device

    # debug: timeouts set low...
    ser = serial.Serial(
        port=dev,
        baudrate=57600,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
        bytesize=serial.EIGHTBITS,
        timeout=4,
        write_timeout=2,
        inter_byte_timeout=2,
    )

    if args.command == "info":
        initiate_command(ser, CMD_BOARD_INFO)

        # info = ser.read(29)
        info = ser.read(12)
        model = info[0:4].decode("utf-8")
        hardware = int.from_bytes(info[4:8], byteorder="little", signed=False)
        software = int.from_bytes(info[8:], byteorder="little", signed=False)
        print(f"     Board model: {model}")
        print(f"  Board revision: {hardware}")
        print(f"Monitor revision: {software}")
        for i, l in enumerate(info):
            print(f"{i:02x}  {l:02x}  {l:c}")

    elif args.command == "read":
        addr = int(args.addr, 0)
        size = int(args.size, 0)

        data = read_memory(ser, addr, size)

        if args.table:
            lines = format_table(data, addr)
            for l in lines:
                print(l)
        else:
            sys.stdout.buffer.write(data)

    elif args.command == "write":
        addr = int(args.addr, 0)

        data = pathlib.Path(args.file).read_bytes()
        write_memory(ser, addr, data)

    elif args.command == "exec":

        initiate_command(ser, CMD_EXEC_DIRECT)
        addr = int(args.addr, 0)
        ser.write(bytes([lo(addr), hi(addr), bank(addr)]))

    else:
        raise RuntimeError(f"Invalid command received: {args.command}")
